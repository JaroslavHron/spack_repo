From 997969d76a9079b0828743f6700402f30af92d65 Mon Sep 17 00:00:00 2001
From: Stefano Zampini <stefano.zampini@gmail.com>
Date: Sat, 4 Mar 2017 18:04:17 -0500
Subject: [PATCH 01/25] l2gmap must be set before preallocation for MatIS

XAIJPreallocation calls MatISSetPreallocation
---
 dolfin/la/PETScMatrix.cpp | 56 +++++++++++++++++++++++------------------------
 1 file changed, 27 insertions(+), 29 deletions(-)

diff --git a/dolfin/la/PETScMatrix.cpp b/dolfin/la/PETScMatrix.cpp
index f83e8c5..0ef9d64 100644
--- a/dolfin/la/PETScMatrix.cpp
+++ b/dolfin/la/PETScMatrix.cpp
@@ -142,28 +142,6 @@ void PETScMatrix::init(const TensorLayout& tensor_layout)
   ierr = MatSetFromOptions(_matA);
   if (ierr != 0) petsc_error(ierr, __FILE__, "MatSetFromOptions");
 
-  // Build data to initialixe sparsity pattern (modify for block size)
-  std::vector<PetscInt> _num_nonzeros_diagonal(num_nonzeros_diagonal.size()/block_size),
-    _num_nonzeros_off_diagonal(num_nonzeros_off_diagonal.size()/block_size);
-
-  for (std::size_t i = 0; i < _num_nonzeros_diagonal.size(); ++i)
-  {
-    _num_nonzeros_diagonal[i]
-      = dolfin_ceil_div(num_nonzeros_diagonal[block_size*i], block_size);
-  }
-  for (std::size_t i = 0; i < _num_nonzeros_off_diagonal.size(); ++i)
-  {
-    _num_nonzeros_off_diagonal[i]
-      = dolfin_ceil_div(num_nonzeros_off_diagonal[block_size*i], block_size);
-  }
-
-  // Allocate space (using data from sparsity pattern)
-  ierr = MatXAIJSetPreallocation(_matA, block_size,
-                                 _num_nonzeros_diagonal.data(),
-                                 _num_nonzeros_off_diagonal.data(), NULL, NULL);
-  if (ierr != 0) petsc_error(ierr, __FILE__, "MatXIJSetPreallocation");
-
-
   // Create pointers to PETSc IndexSet for local-to-globa map
   ISLocalToGlobalMapping petsc_local_to_global0, petsc_local_to_global1;
   dolfin_assert(tensor_layout.rank() == 2);
@@ -193,19 +171,39 @@ void PETScMatrix::init(const TensorLayout& tensor_layout)
                              petsc_local_to_global1);
   if (ierr != 0) petsc_error(ierr, __FILE__, "MatSetLocalToGlobalMapping");
 
-  // Note: This should be called after having set the local-to-global
-  // map for MATIS (this is a dummy call if _matA is not of type
-  // MATIS)
-  ierr = MatISSetPreallocation(_matA, 0, _num_nonzeros_diagonal.data(),
-                               0, _num_nonzeros_off_diagonal.data());
-  if (ierr != 0) petsc_error(ierr, __FILE__, "MatISSetPreallocation");
-
   // Clean up local-to-global maps
   ISLocalToGlobalMappingDestroy(&petsc_local_to_global0);
   if (ierr != 0) petsc_error(ierr, __FILE__, "ISLocalToGlobalMappingDestroy");
   ISLocalToGlobalMappingDestroy(&petsc_local_to_global1);
   if (ierr != 0) petsc_error(ierr, __FILE__, "ISLocalToGlobalMappingDestroy");
 
+  // Build data to initialixe sparsity pattern (modify for block size)
+  std::vector<PetscInt> _num_nonzeros_diagonal(num_nonzeros_diagonal.size()/block_size),
+    _num_nonzeros_off_diagonal(num_nonzeros_off_diagonal.size()/block_size);
+
+  for (std::size_t i = 0; i < _num_nonzeros_diagonal.size(); ++i)
+  {
+    _num_nonzeros_diagonal[i]
+      = dolfin_ceil_div(num_nonzeros_diagonal[block_size*i], block_size);
+  }
+  for (std::size_t i = 0; i < _num_nonzeros_off_diagonal.size(); ++i)
+  {
+    _num_nonzeros_off_diagonal[i]
+      = dolfin_ceil_div(num_nonzeros_off_diagonal[block_size*i], block_size);
+  }
+
+  // Allocate space (using data from sparsity pattern)
+  ierr = MatXAIJSetPreallocation(_matA, block_size,
+                                 _num_nonzeros_diagonal.data(),
+                                 _num_nonzeros_off_diagonal.data(), NULL, NULL);
+  if (ierr != 0) petsc_error(ierr, __FILE__, "MatXIJSetPreallocation");
+
+  // Note: This should be called after having set the local-to-global
+  // map for MATIS
+  ierr = MatISSetPreallocation(_matA, 0, _num_nonzeros_diagonal.data(),
+                               0, _num_nonzeros_off_diagonal.data());
+  if (ierr != 0) petsc_error(ierr, __FILE__, "MatISSetPreallocation");
+
   // Set some options on _matA object
 
   // Do not allow more entries than have been pre-allocated
-- 
2.7.4


From e31e4916cbd6307cef8b4587e5e0afd7f315db80 Mon Sep 17 00:00:00 2001
From: Stefano Zampini <stefano.zampini@gmail.com>
Date: Mon, 13 Mar 2017 18:04:50 +0300
Subject: [PATCH 02/25] Fix for bc application on non-square matrices

---
 dolfin/fem/DirichletBC.cpp | 18 +++++++++++-------
 1 file changed, 11 insertions(+), 7 deletions(-)

diff --git a/dolfin/fem/DirichletBC.cpp b/dolfin/fem/DirichletBC.cpp
index 3f254aa..545e317 100644
--- a/dolfin/fem/DirichletBC.cpp
+++ b/dolfin/fem/DirichletBC.cpp
@@ -497,19 +497,23 @@ void DirichletBC::apply(GenericMatrix* A,
   if (A)
   {
     const bool use_ident = parameters["use_ident"];
-    if (use_ident)
+    const bool square = (A->size(0) == A->size(1));
+    if (use_ident && square)
       A->ident_local(size, dofs.data());
     else
     {
       A->zero_local(size, dofs.data());
 
-      const std::size_t offset
-        = _function_space->dofmap()->ownership_range().first;
-      for (std::size_t i = 0; i < size; i++)
+      if (square)
       {
-        std::pair<std::size_t, std::size_t> ij(offset + dofs[i],
-                                               offset + dofs[i]);
-        A->setitem(ij, 1.0);
+        const std::size_t offset
+          = _function_space->dofmap()->ownership_range().first;
+        for (std::size_t i = 0; i < size; i++)
+        {
+          std::pair<std::size_t, std::size_t> ij(offset + dofs[i],
+                                                 offset + dofs[i]);
+          A->setitem(ij, 1.0);
+        }
       }
     }
 
-- 
2.7.4


From 4ac0bd3c50927e422f87f41c37dca638a38ac1a2 Mon Sep 17 00:00:00 2001
From: Stefano Zampini <stefano.zampini@gmail.com>
Date: Thu, 18 Jan 2018 12:57:43 +0300
Subject: [PATCH 03/25] Add BDDC to the list of available preconditioners

---
 dolfin/la/PETScPreconditioner.cpp | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/dolfin/la/PETScPreconditioner.cpp b/dolfin/la/PETScPreconditioner.cpp
index baa68fe..b588643 100644
--- a/dolfin/la/PETScPreconditioner.cpp
+++ b/dolfin/la/PETScPreconditioner.cpp
@@ -43,6 +43,7 @@ const std::map<std::string, const PCType> PETScPreconditioner::_methods
     {"sor",              PCSOR},
     {"additive_schwarz", PCASM},
     {"petsc_amg",        PCGAMG},
+    {"bddc",             PCBDDC},
 #if PETSC_HAVE_HYPRE
     {"hypre_amg",        PCHYPRE},
     {"hypre_euclid",     PCHYPRE},
@@ -65,6 +66,7 @@ PETScPreconditioner::_methods_descr
     {"jacobi",           "Jacobi iteration"},
     {"sor",              "Successive over-relaxation"},
     {"petsc_amg",        "PETSc algebraic multigrid"},
+    {"bddc",             "Balancing Domain Decomposition by Constraints"},
 #if PETSC_HAVE_HYPRE
     {"amg",              "Algebraic multigrid"},
     {"hypre_amg",        "Hypre algebraic multigrid (BoomerAMG)"},
-- 
2.7.4


From 1264f6c87bd8c8803b2e4e167c5e6c56d6b289d5 Mon Sep 17 00:00:00 2001
From: Stefano Zampini <stefano.zampini@gmail.com>
Date: Thu, 18 Jan 2018 12:58:23 +0300
Subject: [PATCH 04/25] default monitor for TAO has been renamed

---
 dolfin/nls/PETScTAOSolver.cpp | 7 +------
 1 file changed, 1 insertion(+), 6 deletions(-)

diff --git a/dolfin/nls/PETScTAOSolver.cpp b/dolfin/nls/PETScTAOSolver.cpp
index cebb0de..2d9a806 100644
--- a/dolfin/nls/PETScTAOSolver.cpp
+++ b/dolfin/nls/PETScTAOSolver.cpp
@@ -246,12 +246,7 @@ void PETScTAOSolver::init(OptimisationProblem& optimisation_problem,
   // Set the monitor
   if (parameters["monitor_convergence"])
   {
-    ierr = TaoSetMonitor(_tao,
-#if PETSC_VERSION_MAJOR == 3 && PETSC_VERSION_MINOR <= 8 && PETSC_VERSION_RELEASE == 1
-                         TaoDefaultMonitor,
-#else
-                         TaoMonitorDefault,
-#endif
+    ierr = TaoSetMonitor(_tao, TaoMonitorDefault,
                          PETSC_VIEWER_STDOUT_(PetscObjectComm((PetscObject)_tao)),
                          NULL);
     if (ierr != 0) petsc_error(ierr, __FILE__, "TaoSetMonitor");
-- 
2.7.4


From 82dcf3c411e08d2e11a490c5b10d888e52259068 Mon Sep 17 00:00:00 2001
From: Stefano Zampini <stefano.zampini@gmail.com>
Date: Thu, 18 Jan 2018 12:59:39 +0300
Subject: [PATCH 05/25] No need to call MatISSetPreallocation anymore

this call is done inside MatXAIJSetPreallocation
---
 dolfin/la/PETScMatrix.cpp | 6 ------
 1 file changed, 6 deletions(-)

diff --git a/dolfin/la/PETScMatrix.cpp b/dolfin/la/PETScMatrix.cpp
index 0ef9d64..4da5f7a 100644
--- a/dolfin/la/PETScMatrix.cpp
+++ b/dolfin/la/PETScMatrix.cpp
@@ -198,12 +198,6 @@ void PETScMatrix::init(const TensorLayout& tensor_layout)
                                  _num_nonzeros_off_diagonal.data(), NULL, NULL);
   if (ierr != 0) petsc_error(ierr, __FILE__, "MatXIJSetPreallocation");
 
-  // Note: This should be called after having set the local-to-global
-  // map for MATIS
-  ierr = MatISSetPreallocation(_matA, 0, _num_nonzeros_diagonal.data(),
-                               0, _num_nonzeros_off_diagonal.data());
-  if (ierr != 0) petsc_error(ierr, __FILE__, "MatISSetPreallocation");
-
   // Set some options on _matA object
 
   // Do not allow more entries than have been pre-allocated
-- 
2.7.4


From c0b17c38dca106cc73d30f361b427feed5944c9a Mon Sep 17 00:00:00 2001
From: Stefano Zampini <stefano.zampini@gmail.com>
Date: Thu, 18 Jan 2018 13:02:43 +0300
Subject: [PATCH 06/25] Added on_boundary to the logic

---
 demo/documented/mixed-poisson/cpp/main.cpp.rst | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/demo/documented/mixed-poisson/cpp/main.cpp.rst b/demo/documented/mixed-poisson/cpp/main.cpp.rst
index 8255d46..7f61b96 100644
--- a/demo/documented/mixed-poisson/cpp/main.cpp.rst
+++ b/demo/documented/mixed-poisson/cpp/main.cpp.rst
@@ -190,7 +190,7 @@ boundary of the domain, which is derived from the
    {
      bool inside(const Array<double>& x, bool on_boundary) const
      {
-       return x[1] < DOLFIN_EPS or x[1] > 1.0 - DOLFIN_EPS;
+       return on_boundary && (x[1] < DOLFIN_EPS or x[1] > 1.0 - DOLFIN_EPS);
      }
    };
 
-- 
2.7.4


From 3b0699b384c069a6d466fa4b02bacd6077579d3f Mon Sep 17 00:00:00 2001
From: Stefano Zampini <stefano.zampini@gmail.com>
Date: Thu, 18 Jan 2018 17:08:21 +0300
Subject: [PATCH 07/25] Added support for non-overlapping assembly without
 passing through the PETSc options database

---
 dolfin/fem/LinearVariationalSolver.cpp |  2 ++
 dolfin/fem/LinearVariationalSolver.h   |  1 +
 dolfin/la/GenericMatrix.h              | 10 ++++++++++
 dolfin/la/Matrix.h                     |  4 ++++
 dolfin/la/PETScMatrix.cpp              | 15 +++++++++++++++
 dolfin/la/PETScMatrix.h                |  3 +++
 6 files changed, 35 insertions(+)

diff --git a/dolfin/fem/LinearVariationalSolver.cpp b/dolfin/fem/LinearVariationalSolver.cpp
index 3b97f79..ca7b50b 100644
--- a/dolfin/fem/LinearVariationalSolver.cpp
+++ b/dolfin/fem/LinearVariationalSolver.cpp
@@ -55,6 +55,7 @@ void LinearVariationalSolver::solve()
   const bool print_rhs      = parameters["print_rhs"];
   const bool symmetric      = parameters["symmetric"];
   const bool print_matrix   = parameters["print_matrix"];
+  const bool nonovl_matrix  = parameters["nonoverlapping_assembly"];
 
   // Get problem data
   dolfin_assert(_problem);
@@ -72,6 +73,7 @@ void LinearVariationalSolver::solve()
   MPI_Comm comm = u->vector()->mpi_comm();
   std::shared_ptr<GenericMatrix> A = u->vector()->factory().create_matrix(comm);
   std::shared_ptr<GenericVector> b = u->vector()->factory().create_vector(comm);
+  A->nonoverlapping_assembly(nonovl_matrix);
 
   // Different assembly depending on whether or not the system is symmetric
   if (symmetric)
diff --git a/dolfin/fem/LinearVariationalSolver.h b/dolfin/fem/LinearVariationalSolver.h
index e6a018c..bb8fb58 100644
--- a/dolfin/fem/LinearVariationalSolver.h
+++ b/dolfin/fem/LinearVariationalSolver.h
@@ -56,6 +56,7 @@ namespace dolfin
 
       p.add("print_rhs", false);
       p.add("print_matrix", false);
+      p.add("nonoverlapping_assembly", false);
 
       p.add(LUSolver::default_parameters());
       p.add(KrylovSolver::default_parameters());
diff --git a/dolfin/la/GenericMatrix.h b/dolfin/la/GenericMatrix.h
index 4347557..4fe0c7d 100644
--- a/dolfin/la/GenericMatrix.h
+++ b/dolfin/la/GenericMatrix.h
@@ -230,6 +230,15 @@ namespace dolfin
     /// Assignment operator
     virtual const GenericMatrix& operator= (const GenericMatrix& x) = 0;
 
+    /// Activates process-wise assembly suitable for non-overlapping DD
+    virtual void nonoverlapping_assembly(bool nonovl = true)
+    {
+      if (nonovl)
+        dolfin_error("GenericMatrix.h",
+                     "perform non-overlapping assembly",
+                     "Not implemented by current linear algebra backend");
+    }
+
     //--- Convenience functions ---
 
     /// Get value of given entry
@@ -253,6 +262,7 @@ namespace dolfin
 
     /// Insert one on the diagonal for all zero rows
     virtual void ident_zeros(double tol=DOLFIN_EPS);
+
   };
 
 }
diff --git a/dolfin/la/Matrix.h b/dolfin/la/Matrix.h
index b7df3c6..75e4d6f 100644
--- a/dolfin/la/Matrix.h
+++ b/dolfin/la/Matrix.h
@@ -207,6 +207,10 @@ namespace dolfin
     virtual bool is_symmetric(double tol) const
     { return matrix->is_symmetric(tol); }
 
+    /// Activates process-wise assembly suitable for non-overlapping DD
+    virtual void nonoverlapping_assembly(bool nonovl = true)
+    { matrix->nonoverlapping_assembly(nonovl); }
+
     //--- Special functions ---
 
     /// Return linear algebra backend factory
diff --git a/dolfin/la/PETScMatrix.cpp b/dolfin/la/PETScMatrix.cpp
index 4da5f7a..49919f9 100644
--- a/dolfin/la/PETScMatrix.cpp
+++ b/dolfin/la/PETScMatrix.cpp
@@ -209,6 +209,21 @@ void PETScMatrix::init(const TensorLayout& tensor_layout)
   if (ierr != 0) petsc_error(ierr, __FILE__, "MatSetOption");
 }
 //-----------------------------------------------------------------------------
+void PETScMatrix::nonoverlapping_assembly(bool nonovl)
+{
+  // Set the type of matrix to MATIS
+  if (nonovl)
+  {
+    PetscErrorCode ierr = MatSetType(_matA, MATIS);
+    if (ierr != 0) petsc_error(ierr, __FILE__, "MatSetType");
+  }
+  else
+  {
+    PetscErrorCode ierr = MatSetType(_matA, MATAIJ);
+    if (ierr != 0) petsc_error(ierr, __FILE__, "MatSetType");
+  }
+}
+//-----------------------------------------------------------------------------
 bool PETScMatrix::empty() const
 {
   auto sizes = PETScBaseMatrix::size();
diff --git a/dolfin/la/PETScMatrix.h b/dolfin/la/PETScMatrix.h
index 2370ba6..25dfcd1 100644
--- a/dolfin/la/PETScMatrix.h
+++ b/dolfin/la/PETScMatrix.h
@@ -205,6 +205,9 @@ namespace dolfin
     /// Test if matrix is symmetric
     virtual bool is_symmetric(double tol) const;
 
+    /// Activates process-wise assembly suitable for non-overlapping DD
+    virtual void nonoverlapping_assembly(bool nonovl);
+
     //--- Special functions ---
 
     /// Return linear algebra backend factory
-- 
2.7.4


From 1dd32f8831bfc786e2421f12fe43257e82101975 Mon Sep 17 00:00:00 2001
From: Stefano Zampini <stefano.zampini@gmail.com>
Date: Thu, 18 Jan 2018 17:09:44 +0300
Subject: [PATCH 08/25] Add parameter to call KSPSetFromOptions without having
 to resort to PETScKrylovSolver explicitly

---
 dolfin/la/KrylovSolver.cpp      | 1 +
 dolfin/la/PETScKrylovSolver.cpp | 7 +++++++
 2 files changed, 8 insertions(+)

diff --git a/dolfin/la/KrylovSolver.cpp b/dolfin/la/KrylovSolver.cpp
index 886f1ec..157bd46 100644
--- a/dolfin/la/KrylovSolver.cpp
+++ b/dolfin/la/KrylovSolver.cpp
@@ -41,6 +41,7 @@ Parameters KrylovSolver::default_parameters()
   p.add<bool>("monitor_convergence");
   p.add<bool>("error_on_nonconvergence");
   p.add<bool>("nonzero_initial_guess");
+  p.add<bool>("customize_from_options");
 
   return p;
 }
diff --git a/dolfin/la/PETScKrylovSolver.cpp b/dolfin/la/PETScKrylovSolver.cpp
index e729093..0f69b7d 100644
--- a/dolfin/la/PETScKrylovSolver.cpp
+++ b/dolfin/la/PETScKrylovSolver.cpp
@@ -327,6 +327,13 @@ std::size_t PETScKrylovSolver::solve(PETScVector& x, const PETScVector& b,
       x.zero();
   }
 
+  // Set from options
+  if (this->parameters["customize_from_options"].is_set())
+  {
+    const bool opts = this->parameters["customize_from_options"];
+    if (opts) this->set_from_options();
+  }
+
   // Solve linear system
   if (dolfin::MPI::rank(this->mpi_comm()) == 0)
   {
-- 
2.7.4


From 1090b07c348c049e8df2de7ecd72e83b00dc436b Mon Sep 17 00:00:00 2001
From: Stefano Zampini <stefano.zampini@gmail.com>
Date: Thu, 18 Jan 2018 17:11:09 +0300
Subject: [PATCH 09/25] Fix typos

---
 demo/documented/stokes-iterative/cpp/main.cpp | 2 +-
 dolfin/fem/PETScDMCollection.cpp              | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/demo/documented/stokes-iterative/cpp/main.cpp b/demo/documented/stokes-iterative/cpp/main.cpp
index 69d1fec..c19e043 100644
--- a/demo/documented/stokes-iterative/cpp/main.cpp
+++ b/demo/documented/stokes-iterative/cpp/main.cpp
@@ -130,7 +130,7 @@ int main()
   // Create form for the Stokes preconditioner
   StokesPreconditioner::BilinearForm a_P(W, W);
 
-  // Assemble precondtioner system (P, b_dummy)
+  // Assemble preconditioner system (P, b_dummy)
   auto P = std::make_shared<Matrix>();
   Vector b;
   assemble_system(*P, b, a_P, L, {inflow, noslip});
diff --git a/dolfin/fem/PETScDMCollection.cpp b/dolfin/fem/PETScDMCollection.cpp
index 191a0fb..d930c8c 100644
--- a/dolfin/fem/PETScDMCollection.cpp
+++ b/dolfin/fem/PETScDMCollection.cpp
@@ -148,7 +148,7 @@ PETScDMCollection::PETScDMCollection(std::vector<std::shared_ptr<const FunctionS
     DMShellCreate(comm, &_dms[i]);
     DMShellSetContext(_dms[i], (void*)_spaces[i].get());
 
-    // Suppy function to create global vector on DM
+    // Supply function to create global vector on DM
     DMShellSetCreateGlobalVector(_dms[i],
                                  PETScDMCollection::create_global_vector);
 
-- 
2.7.4


From 1d4fe96afb7e52bf0b2f193b5ce63b57ece4af00 Mon Sep 17 00:00:00 2001
From: Stefano Zampini <stefano.zampini@gmail.com>
Date: Wed, 7 Feb 2018 14:15:10 +0300
Subject: [PATCH 10/25] Add default value to declaration

---
 dolfin/la/PETScMatrix.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/dolfin/la/PETScMatrix.h b/dolfin/la/PETScMatrix.h
index 25dfcd1..a4ffb95 100644
--- a/dolfin/la/PETScMatrix.h
+++ b/dolfin/la/PETScMatrix.h
@@ -206,7 +206,7 @@ namespace dolfin
     virtual bool is_symmetric(double tol) const;
 
     /// Activates process-wise assembly suitable for non-overlapping DD
-    virtual void nonoverlapping_assembly(bool nonovl);
+    virtual void nonoverlapping_assembly(bool nonovl = true);
 
     //--- Special functions ---
 
-- 
2.7.4


From dae281b04f418565dbd798b7a3e7bad3c99b0a02 Mon Sep 17 00:00:00 2001
From: Stefano Zampini <stefano.zampini@gmail.com>
Date: Wed, 7 Feb 2018 14:54:14 +0300
Subject: [PATCH 11/25] Add FETIDP to the list of available methods

---
 dolfin/la/PETScKrylovSolver.cpp | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/dolfin/la/PETScKrylovSolver.cpp b/dolfin/la/PETScKrylovSolver.cpp
index 0f69b7d..b8c0ac6 100644
--- a/dolfin/la/PETScKrylovSolver.cpp
+++ b/dolfin/la/PETScKrylovSolver.cpp
@@ -48,6 +48,7 @@ const std::map<std::string, const KSPType> PETScKrylovSolver::_methods
     {"tfqmr",      KSPTFQMR},
     {"richardson", KSPRICHARDSON},
     {"bicgstab",   KSPBCGS},
+    {"fetidp",     KSPFETIDP},
     #if PETSC_VERSION_MAJOR == 3 && PETSC_VERSION_MINOR <= 7 && PETSC_VERSION_RELEASE == 1
     {"nash",       KSPNASH},
     {"stcg",       KSPSTCG}
@@ -64,7 +65,8 @@ PETScKrylovSolver::_methods_descr
   {"minres",     "Minimal residual method"},
   {"tfqmr",      "Transpose-free quasi-minimal residual method"},
   {"richardson", "Richardson method"},
-  {"bicgstab",   "Biconjugate gradient stabilized method"} };
+  {"bicgstab",   "Biconjugate gradient stabilized method"},
+  {"fetidp",     "Finite Element Tearing and Interconnecting Dual-Primal"} };
 
 //-----------------------------------------------------------------------------
 std::map<std::string, std::string> PETScKrylovSolver::methods()
-- 
2.7.4


From 3a38a0aafddb0740101129504a229e718338af43 Mon Sep 17 00:00:00 2001
From: Stefano Zampini <stefano.zampini@gmail.com>
Date: Wed, 7 Feb 2018 14:56:08 +0300
Subject: [PATCH 12/25] MatSolverPackage -> MatSolverType

---
 dolfin/la/PETScLUSolver.cpp | 8 ++------
 1 file changed, 2 insertions(+), 6 deletions(-)

diff --git a/dolfin/la/PETScLUSolver.cpp b/dolfin/la/PETScLUSolver.cpp
index 820cb09..144f531 100644
--- a/dolfin/la/PETScLUSolver.cpp
+++ b/dolfin/la/PETScLUSolver.cpp
@@ -36,14 +36,10 @@ using namespace dolfin;
 // Functions in anonymous namespace (local scope)
 namespace
 {
-  const MatSolverType get_solver_package_type(KSP ksp)
+  MatSolverType get_solver_package_type(KSP ksp)
   {
     PetscErrorCode ierr;
-#if PETSC_VERSION_MAJOR == 3 && PETSC_VERSION_MINOR <= 8 && PETSC_VERSION_RELEASE == 1
-    const MatSolverType solver_type;
-#else
-    MatSolverType solver_type = 0;
-#endif
+    MatSolverType solver_type;
     PC pc;
     ierr = KSPGetPC(ksp, &pc);
     if (ierr != 0) dolfin::PETScObject::petsc_error(ierr, __FILE__, "KSPGetPC");
-- 
2.7.4


From e33af5cd57e65c53ea03f56bc710b05ddfba8b31 Mon Sep 17 00:00:00 2001
From: Stefano Zampini <stefano.zampini@gmail.com>
Date: Sat, 24 Feb 2018 16:21:47 +0300
Subject: [PATCH 13/25] Added BDDC case to PETScKrylovSolver::set

---
 dolfin/la/PETScPreconditioner.cpp | 8 +++++++-
 1 file changed, 7 insertions(+), 1 deletion(-)

diff --git a/dolfin/la/PETScPreconditioner.cpp b/dolfin/la/PETScPreconditioner.cpp
index b588643..acfa4f6 100644
--- a/dolfin/la/PETScPreconditioner.cpp
+++ b/dolfin/la/PETScPreconditioner.cpp
@@ -145,7 +145,7 @@ void PETScPreconditioner::set(PETScKrylovSolver& solver)
   ierr = KSPGetPC(solver.ksp(), &pc);
   if (ierr != 0) petsc_error(ierr, __FILE__, "KSPGetPC");
 
-  // Treat special cases  first
+  // Treat special cases first
   if (_type.find("hypre") != std::string::npos)
   {
     #if PETSC_HAVE_HYPRE
@@ -194,6 +194,12 @@ void PETScPreconditioner::set(PETScKrylovSolver& solver)
     ierr = PCSetType(pc, PCGAMG);
     if (ierr != 0) petsc_error(ierr, __FILE__, "PCSetType");
   }
+  else if (_type == "bddc")
+  {
+    // Set preconditioner to BDDC
+    ierr = PCSetType(pc, PCBDDC);
+    if (ierr != 0) petsc_error(ierr, __FILE__, "PCSetType");
+  }
 
   // Set physical coordinates for row dofs
   if (!_coordinates.empty())
-- 
2.7.4


From 025860ae62622ff83e8111de3dd063a71f6ceac5 Mon Sep 17 00:00:00 2001
From: Stefano Zampini <stefano.zampini@gmail.com>
Date: Sat, 24 Feb 2018 16:22:48 +0300
Subject: [PATCH 14/25] Added BDDC API to PetscPreconditioner::set_fieldsplit

---
 dolfin/la/PETScPreconditioner.cpp | 12 ++++++++++--
 1 file changed, 10 insertions(+), 2 deletions(-)

diff --git a/dolfin/la/PETScPreconditioner.cpp b/dolfin/la/PETScPreconditioner.cpp
index acfa4f6..aee8319 100644
--- a/dolfin/la/PETScPreconditioner.cpp
+++ b/dolfin/la/PETScPreconditioner.cpp
@@ -241,6 +241,7 @@ void PETScPreconditioner::set_fieldsplit(
   if (ierr != 0) petsc_error(ierr, __FILE__, "KSPGetPC");
 
   // Add split for each field
+  std::vector<IS> isfields;
   for (std::size_t i = 0; i < fields.size(); ++i)
   {
     // Create IndexSet
@@ -248,13 +249,20 @@ void PETScPreconditioner::set_fieldsplit(
     ierr = ISCreateGeneral(solver.mpi_comm(), fields[i].size(), fields[i].data(),
                            PETSC_USE_POINTER, &is);
     if (ierr != 0) petsc_error(ierr, __FILE__, "ISCreateGeneral");
+    isfields.push_back(is);
+  }
+
+  ierr = PCBDDCSetDofsSplitting(pc, isfields.size(), isfields.data());
+  if (ierr != 0) petsc_error(ierr, __FILE__, "PCFieldSplitSetIS");
 
+  for (std::size_t i = 0; i < isfields.size(); ++i)
+  {
     // Add split
-    ierr = PCFieldSplitSetIS(pc, split_names[i].c_str(), is);
+    ierr = PCFieldSplitSetIS(pc, split_names[i].c_str(), isfields[i]);
     if (ierr != 0) petsc_error(ierr, __FILE__, "PCFieldSplitSetIS");
 
     // Clean up IndexSet
-    ierr = ISDestroy(&is);
+    ierr = ISDestroy(&isfields[i]);
     if (ierr != 0) petsc_error(ierr, __FILE__, "ISDestroy");
   }
 }
-- 
2.7.4


From 8b5e88cc593c5657eb80cfa5fbb0c326057a08c6 Mon Sep 17 00:00:00 2001
From: Stefano Zampini <stefano.zampini@gmail.com>
Date: Mon, 26 Feb 2018 13:05:28 +0300
Subject: [PATCH 15/25] nullify pointer

---
 dolfin/fem/PETScDMCollection.cpp | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/dolfin/fem/PETScDMCollection.cpp b/dolfin/fem/PETScDMCollection.cpp
index d930c8c..82e639a 100644
--- a/dolfin/fem/PETScDMCollection.cpp
+++ b/dolfin/fem/PETScDMCollection.cpp
@@ -711,11 +711,12 @@ void PETScDMCollection::find_exterior_points(MPI_Comm mpi_comm,
 //-----------------------------------------------------------------------------
 PetscErrorCode PETScDMCollection::create_global_vector(DM dm, Vec* vec)
 {
-  // Get DOLFIN FunctiobSpace from the PETSc DM object
-  std::shared_ptr<FunctionSpace> *V;
+  // Get DOLFIN FunctionSpace from the PETSc DM object
+  std::shared_ptr<FunctionSpace> *V(nullptr);
   DMShellGetContext(dm, (void**)&V);
 
   // Create Vector
+  dolfin_assert(V);
   Function u(*V);
   *vec = as_type<PETScVector>(u.vector())->vec();
 
-- 
2.7.4


From c20878a18fe37070a54d6dedfe5a824512657025 Mon Sep 17 00:00:00 2001
From: Stefano Zampini <stefano.zampini@gmail.com>
Date: Mon, 26 Feb 2018 16:26:35 +0300
Subject: [PATCH 16/25] Add a couple of += operators to the Function class

---
 dolfin/function/Function.cpp | 15 +++++++++++++++
 dolfin/function/Function.h   | 14 ++++++++++++++
 2 files changed, 29 insertions(+)

diff --git a/dolfin/function/Function.cpp b/dolfin/function/Function.cpp
index 950b5da..fa79b65 100644
--- a/dolfin/function/Function.cpp
+++ b/dolfin/function/Function.cpp
@@ -197,6 +197,21 @@ const Function& Function::operator= (const Expression& v)
   return *this;
 }
 //-----------------------------------------------------------------------------
+const Function& Function::operator+= (const Function& v)
+{
+  dolfin_assert(v._vector->size() == _vector->size());
+  _vector->axpy(1.0,*(v._vector));
+  return *this;
+}
+//-----------------------------------------------------------------------------
+const Function& Function::operator+= (const Expression& v)
+{
+  Function tf(*this);
+  tf.interpolate(v);
+  *this += tf;
+  return *this;
+}
+//-----------------------------------------------------------------------------
 Function& Function::operator[] (std::size_t i) const
 {
   // Check if sub-Function is in the cache, otherwise create and add
diff --git a/dolfin/function/Function.h b/dolfin/function/Function.h
index c6c874c..d9d8f34 100644
--- a/dolfin/function/Function.h
+++ b/dolfin/function/Function.h
@@ -126,6 +126,13 @@ namespace dolfin
     ///         Another function.
     const Function& operator= (const Function& v);
 
+    /// Add a function
+    ///
+    /// *Arguments*
+    ///     v (_Function_)
+    ///         Another function.
+    const Function& operator+= (const Function& v);
+
     /// Assignment from expression using interpolation
     ///
     /// *Arguments*
@@ -133,6 +140,13 @@ namespace dolfin
     ///         The expression.
     const Function& operator= (const Expression& v);
 
+    /// Add expression using interpolation
+    ///
+    /// *Arguments*
+    ///     v (_Expression_)
+    ///         The expression.
+    const Function& operator+= (const Expression& v);
+
     /// Assignment from linear combination of function
     ///
     /// *Arguments*
-- 
2.7.4


From 136b2cbf2051c7bb88f5631d493cc2037ef6c915 Mon Sep 17 00:00:00 2001
From: Stefano Zampini <stefano.zampini@gmail.com>
Date: Tue, 27 Feb 2018 18:59:18 +0300
Subject: [PATCH 17/25] Add names to index sets

---
 dolfin/la/PETScPreconditioner.cpp | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/dolfin/la/PETScPreconditioner.cpp b/dolfin/la/PETScPreconditioner.cpp
index aee8319..e0a8ceb 100644
--- a/dolfin/la/PETScPreconditioner.cpp
+++ b/dolfin/la/PETScPreconditioner.cpp
@@ -249,6 +249,10 @@ void PETScPreconditioner::set_fieldsplit(
     ierr = ISCreateGeneral(solver.mpi_comm(), fields[i].size(), fields[i].data(),
                            PETSC_USE_POINTER, &is);
     if (ierr != 0) petsc_error(ierr, __FILE__, "ISCreateGeneral");
+
+    ierr = PetscObjectSetName((PetscObject)is, split_names[i].c_str());
+    if (ierr != 0) petsc_error(ierr, __FILE__, "PetscObjectSetName");
+
     isfields.push_back(is);
   }
 
-- 
2.7.4


From ee7e33c1ba09d9a2774b03fd4084a477659ef760 Mon Sep 17 00:00:00 2001
From: Stefano Zampini <stefano.zampini@gmail.com>
Date: Tue, 13 Mar 2018 17:20:41 +0300
Subject: [PATCH 18/25] Need to pop dolfin error handler before finalizing
 PETSc

---
 dolfin/common/SubSystemsManager.cpp | 1 +
 1 file changed, 1 insertion(+)

diff --git a/dolfin/common/SubSystemsManager.cpp b/dolfin/common/SubSystemsManager.cpp
index 04be7eb..9a2722f 100644
--- a/dolfin/common/SubSystemsManager.cpp
+++ b/dolfin/common/SubSystemsManager.cpp
@@ -244,6 +244,7 @@ void SubSystemsManager::finalize_petsc()
   {
     if (!PetscFinalizeCalled)
     {
+      PetscPopErrorHandler();
       PetscFinalize();
     }
     singleton().petsc_initialized = false;
-- 
2.7.4


From 80cff7d5785b86fb4722d5ca8bf916f031c46b68 Mon Sep 17 00:00:00 2001
From: Stefano Zampini <stefano.zampini@gmail.com>
Date: Wed, 14 Mar 2018 10:33:59 +0300
Subject: [PATCH 19/25] damn CMAKE and Boost

---
 CMakeLists.txt | 7 ++++---
 1 file changed, 4 insertions(+), 3 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 06456ae..6ec5d68 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -256,10 +256,11 @@ find_package(Boost 1.56 QUIET REQUIRED)
 # Note: These should all be private as they do not appear in the
 # DOLFIN public interface , but there is a linking issues with older
 # Boost or CMake. Ubuntu 16.04 requires linking DOLFIN programs with
-# filesystem, whereas Ubuntu 16.10 and macOS (Homebrew) do not.
+# filesystem and program_options, whereas Ubuntu 16.10 and macOS
+# (Homebrew) do not.
 if (Boost_VERSION VERSION_LESS 106100)
-  set(DOLFIN_BOOST_COMPONENTS_PUBLIC filesystem timer)
-  set(DOLFIN_BOOST_COMPONENTS_PRIVATE program_options iostreams)
+  set(DOLFIN_BOOST_COMPONENTS_PUBLIC program_options filesystem timer)
+  set(DOLFIN_BOOST_COMPONENTS_PRIVATE iostreams)
 else()
   set(DOLFIN_BOOST_COMPONENTS_PUBLIC timer)
   set(DOLFIN_BOOST_COMPONENTS_PRIVATE filesystem program_options iostreams)
-- 
2.7.4


From b7f2fd290fca7a477269661874aa888a9b086646 Mon Sep 17 00:00:00 2001
From: Stefano Zampini <stefano.zampini@gmail.com>
Date: Wed, 14 Mar 2018 11:10:45 +0300
Subject: [PATCH 20/25] fix intel warnings: warning #858: type qualifier on
 return type is meaningless

---
 dolfin/la/PETScLUSolver.cpp | 4 ++--
 dolfin/la/PETScLUSolver.h   | 4 ++--
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/dolfin/la/PETScLUSolver.cpp b/dolfin/la/PETScLUSolver.cpp
index 144f531..fd6c7d7 100644
--- a/dolfin/la/PETScLUSolver.cpp
+++ b/dolfin/la/PETScLUSolver.cpp
@@ -306,8 +306,8 @@ KSP PETScLUSolver::ksp() const
   return _solver.ksp();
 }
 //-----------------------------------------------------------------------------
-const MatSolverType PETScLUSolver::select_solver(MPI_Comm comm,
-                                                 std::string method)
+MatSolverType PETScLUSolver::select_solver(MPI_Comm comm,
+                                           std::string method)
 {
   // Check package string
   if (lumethods.count(method) == 0)
diff --git a/dolfin/la/PETScLUSolver.h b/dolfin/la/PETScLUSolver.h
index 4f5d53a..ebf5299 100644
--- a/dolfin/la/PETScLUSolver.h
+++ b/dolfin/la/PETScLUSolver.h
@@ -132,8 +132,8 @@ namespace dolfin
     static std::map<std::string, const MatSolverType> lumethods;
 
     // Select LU solver type
-    static const MatSolverType select_solver(MPI_Comm comm,
-                                             std::string method);
+    static MatSolverType select_solver(MPI_Comm comm,
+                                       std::string method);
 
     PETScKrylovSolver _solver;
 
-- 
2.7.4


From ae07bfc4cfe772da85c6247144b6f0d3086c26aa Mon Sep 17 00:00:00 2001
From: Stefano Zampini <stefano.zampini@gmail.com>
Date: Thu, 17 May 2018 17:20:27 +0300
Subject: [PATCH 21/25] python: expose connections vector as a numpy array

---
 python/src/mesh.cpp | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

diff --git a/python/src/mesh.cpp b/python/src/mesh.cpp
index eef2393..511c8ad 100644
--- a/python/src/mesh.cpp
+++ b/python/src/mesh.cpp
@@ -244,7 +244,12 @@ namespace dolfin_wrappers
       .def("size", (std::size_t (dolfin::MeshConnectivity::*)() const)
            &dolfin::MeshConnectivity::size)
       .def("size", (std::size_t (dolfin::MeshConnectivity::*)(std::size_t) const)
-           &dolfin::MeshConnectivity::size);
+           &dolfin::MeshConnectivity::size)
+      .def("connections", [](dolfin::MeshConnectivity& self)
+           {
+             auto& connections = self();
+             return py::array_t<unsigned int>(connections.size(), connections.data());
+           });
 
     // dolfin::MeshEntity class
     py::class_<dolfin::MeshEntity, std::shared_ptr<dolfin::MeshEntity>>
-- 
2.7.4


From 255c31c3926280213857ed2d18cd6d4fc1cf44bc Mon Sep 17 00:00:00 2001
From: Stefano Zampini <stefano.zampini@gmail.com>
Date: Thu, 17 May 2018 17:23:39 +0300
Subject: [PATCH 22/25] dolfin_utils: fix meshconvert to use connections

---
 python/dolfin_utils/meshconvert/meshconvert.py | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/python/dolfin_utils/meshconvert/meshconvert.py b/python/dolfin_utils/meshconvert/meshconvert.py
index 5b013b0..efdec50 100644
--- a/python/dolfin_utils/meshconvert/meshconvert.py
+++ b/python/dolfin_utils/meshconvert/meshconvert.py
@@ -477,7 +477,8 @@ def gmsh2xml(ifilename, handler):
               # as facets are vertices
               facets_as_nodes = numpy.array([[i] for i in range(mesh.num_facets())])
             else:
-                facets_as_nodes =  numpy.reshape(mesh.topology()(highest_dim-1,0)(),(mesh.num_facets(), highest_dim))
+              #facets_as_nodes =  numpy.reshape(mesh.topology()(highest_dim-1,0)(),(mesh.num_facets(), highest_dim))
+              facets_as_nodes = mesh.topology()(highest_dim-1,0).connections().reshape ( mesh.num_facets(), highest_dim )
 
             # Build the reverse map
             nodes_as_facets = {}
-- 
2.7.4


From 01bd40200338a5f8e555635208f8f758dd40ca9e Mon Sep 17 00:00:00 2001
From: Stefano Zampini <stefano.zampini@gmail.com>
Date: Wed, 3 Oct 2018 16:40:03 +0300
Subject: [PATCH 23/25] Better management of petsc error handling

return control to PETSc if not using the dolfin error handler
---
 dolfin/common/SubSystemsManager.cpp | 20 +++++++++++---------
 dolfin/common/SubSystemsManager.h   |  3 +++
 dolfin/la/PETScObject.cpp           |  5 +++++
 3 files changed, 19 insertions(+), 9 deletions(-)

diff --git a/dolfin/common/SubSystemsManager.cpp b/dolfin/common/SubSystemsManager.cpp
index 9a2722f..077f13c 100644
--- a/dolfin/common/SubSystemsManager.cpp
+++ b/dolfin/common/SubSystemsManager.cpp
@@ -50,7 +50,7 @@ SubSystemsManager& SubSystemsManager::singleton()
 }
 //-----------------------------------------------------------------------------
 SubSystemsManager::SubSystemsManager() : petsc_err_msg(""),
-  petsc_initialized(false), control_mpi(false)
+  petsc_initialized(false), use_petsc_signal_handler(false), control_mpi(false)
 {
   // Do nothing
 }
@@ -165,13 +165,13 @@ void SubSystemsManager::init_petsc(int argc, char* argv[])
   #endif
 
   // Avoid using default PETSc signal handler
-  const bool use_petsc_signal_handler = parameters["use_petsc_signal_handler"];
-  if (!use_petsc_signal_handler)
-    PetscPopSignalHandler();
-
-  // Use our own error handler so we can pretty print errors from
-  // PETSc
-  PetscPushErrorHandler(PetscDolfinErrorHandler, nullptr);
+  singleton().use_petsc_signal_handler = parameters["use_petsc_signal_handler"];
+  if (!singleton().use_petsc_signal_handler)
+  {
+    // Use our own error handler so we can pretty print errors from
+    // PETSc
+    PetscPushErrorHandler(PetscDolfinErrorHandler, nullptr);
+  }
 
   // Remember that PETSc has been initialized
   singleton().petsc_initialized = true;
@@ -244,7 +244,9 @@ void SubSystemsManager::finalize_petsc()
   {
     if (!PetscFinalizeCalled)
     {
-      PetscPopErrorHandler();
+      if (!singleton().use_petsc_signal_handler)
+        PetscPopErrorHandler();
+
       PetscFinalize();
     }
     singleton().petsc_initialized = false;
diff --git a/dolfin/common/SubSystemsManager.h b/dolfin/common/SubSystemsManager.h
index 8986b5f..8db7aaa 100644
--- a/dolfin/common/SubSystemsManager.h
+++ b/dolfin/common/SubSystemsManager.h
@@ -88,6 +88,9 @@ namespace dolfin
     /// Last recorded PETSc error message
     std::string petsc_err_msg;
 
+    /// If we use the internal error handling or not
+    bool use_petsc_signal_handler;
+
   private:
 
     // Constructor (private)
diff --git a/dolfin/la/PETScObject.cpp b/dolfin/la/PETScObject.cpp
index f8274fe..757abbd 100644
--- a/dolfin/la/PETScObject.cpp
+++ b/dolfin/la/PETScObject.cpp
@@ -20,6 +20,7 @@
 #include <petsc.h>
 
 #include <dolfin/common/SubSystemsManager.h>
+#include <dolfin/common/MPI.h>
 #include <dolfin/log/log.h>
 #include "PETScObject.h"
 
@@ -38,6 +39,10 @@ void PETScObject::petsc_error(int error_code,
   const std::string msg = SubSystemsManager::singleton().petsc_err_msg;
   SubSystemsManager::singleton().petsc_err_msg = "";
 
+  if (SubSystemsManager::singleton().use_petsc_signal_handler)
+     PetscError(PETSC_COMM_SELF, 0, NULL, filename.c_str(),
+                error_code, PETSC_ERROR_REPEAT, NULL);
+
   // Log detailed error info
   log(TRACE, "PETSc error in '%s', '%s'",
       filename.c_str(), petsc_function.c_str());
-- 
2.7.4


From 3aa01d89dd5daa53c33dc3ebe55cad8ae244667b Mon Sep 17 00:00:00 2001
From: Stefano Zampini <stefano.zampini@gmail.com>
Date: Wed, 3 Oct 2018 16:40:10 +0300
Subject: [PATCH 24/25] minor fix

---
 dolfin/la/PETScPreconditioner.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/dolfin/la/PETScPreconditioner.cpp b/dolfin/la/PETScPreconditioner.cpp
index e0a8ceb..d916d83 100644
--- a/dolfin/la/PETScPreconditioner.cpp
+++ b/dolfin/la/PETScPreconditioner.cpp
@@ -257,7 +257,7 @@ void PETScPreconditioner::set_fieldsplit(
   }
 
   ierr = PCBDDCSetDofsSplitting(pc, isfields.size(), isfields.data());
-  if (ierr != 0) petsc_error(ierr, __FILE__, "PCFieldSplitSetIS");
+  if (ierr != 0) petsc_error(ierr, __FILE__, "PCBDDCSetDofsSplitting");
 
   for (std::size_t i = 0; i < isfields.size(); ++i)
   {
-- 
2.7.4


From f9209f18e30db3b10c583afed02b4450a116a641 Mon Sep 17 00:00:00 2001
From: Stefano Zampini <stefano.zampini@gmail.com>
Date: Wed, 3 Oct 2018 16:41:05 +0300
Subject: [PATCH 25/25] Update interface to VecScatterCreateWithData

---
 dolfin/la/PETScVector.cpp | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/dolfin/la/PETScVector.cpp b/dolfin/la/PETScVector.cpp
index 69e1795..6b20e22 100644
--- a/dolfin/la/PETScVector.cpp
+++ b/dolfin/la/PETScVector.cpp
@@ -749,8 +749,8 @@ void PETScVector::gather(GenericVector& y,
 
   // Perform scatter
   VecScatter scatter;
-  ierr = VecScatterCreate(_x, from, _y.vec(), to, &scatter);
-  CHECK_ERROR("VecScatterCreate");
+  ierr = VecScatterCreateWithData(_x, from, _y.vec(), to, &scatter);
+  CHECK_ERROR("VecScatterCreateWithData");
   ierr = VecScatterBegin(scatter, _x, _y.vec(), INSERT_VALUES,
                          SCATTER_FORWARD);
   CHECK_ERROR("VecScatterBegin");
-- 
2.7.4

